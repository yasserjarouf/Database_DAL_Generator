using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Base_Generator_Logic.Extensions;

namespace Base_Generator_Logic
{
    public static class sTasks
    {

        const string t1 = "\t";
        const string t2 = "\t\t";
        const string t3 = "\t\t\t";
        const string t4 = "\t\t\t\t";
        const string t5 = "\t\t\t\t\t";
        const string t6 = "\t\t\t\t\t\t";



        // Clean
        // generate text content of a single cs or a class file
        public static string BuildClassFileText(this sTable table, sDb db, List<string> usings = null, string NameSpace = null)
        {

            StringBuilder sb = new StringBuilder();


            // build usings
            if (usings != null)
            {
                foreach (var use in usings)
                {
                    sb.AppendLine(string.Format("using {0};", use));
                }
                sb.AppendLine();
            }


            // namespace start
            if (NameSpace != null)
            {
                NameSpace = string.Format("namespace {0}", NameSpace);
                sb.AppendLine(NameSpace);
                sb.AppendLine("{");
            }


            // class start
            sb.AppendLine(t1 + string.Format("public class {0}", table.CsRefName));
            sb.AppendLine(t1 + "{");
            sb.AppendLine();


            // region start 
            sb.AppendLine(t2 + "#region AutoGenerated");
            sb.AppendLine();


            // 01- properties
            sb.Append(table.getPropertiesDeclarationText());
            sb.AppendLine();


            // 02- parse
            sb.Append(table.getParseDeclarationText());
            sb.AppendLine();


            // 03- add
            sb.Append(table.getAddDeclarationText(db));
            sb.AppendLine();


            // 04- get by key
            sb.Append(table.getGetByIdDeclarationText(db));
            sb.AppendLine();


            // 05- update
            sb.Append(table.getUpdateDeclarationText(db));
            sb.AppendLine();


            // 06- delete
            sb.Append(table.getDeleteByIdDeclarationText(db));
            sb.AppendLine();


            // 07- get all
            sb.Append(table.getGetAllDeclarationText(db));
            sb.AppendLine();


            // 08- get count
            sb.Append(table.getGetCountDeclarationText(db));
            sb.AppendLine();


            // 09- get advanced search
            sb.Append(table.getAdvSearch(db));
            sb.AppendLine();


            // 10- get advanced search records count
            sb.Append(table.getAdvSerachCountOnly(db));
            sb.AppendLine();


            // 11- get build add command string
            sb.Append(table.getBuildAddCommand(db));
            sb.AppendLine();


            // 12- get build update command string
            sb.Append(table.getBuildUpdateCommand(db));
            sb.AppendLine();


            // 13- get build delete command string
            sb.Append(table.getBuildDeleteCommand(db));
            sb.AppendLine();


            // region end
            sb.AppendLine(t2 + "#endregion");
            sb.AppendLine();


            // class end
            sb.AppendLine(t1 + "}");


            // namespace end
            if (!string.IsNullOrEmpty(NameSpace)) sb.AppendLine("}");


            return sb.ToString();

        }



        // Clean
        // generate text content of the db class
        public static string BuildDbClassFileText(this sDb db, List<string> usings = null, string NameSpace = null, string cnStr = null)
        {

            StringBuilder sb = new StringBuilder();

            // build usings
            if (usings != null)
            {
                foreach (var use in usings)
                {
                    sb.AppendLine(string.Format("using {0};", use));
                }
                sb.AppendLine();
            }


            // namespace start
            if (NameSpace != null)
            {
                NameSpace = string.Format("namespace {0}", NameSpace);
                sb.AppendLine(NameSpace);
                sb.AppendLine("{");
            }


            // class start
            sb.AppendLine(t1 + string.Format("public class _{0}", db.CsRefName));
            sb.AppendLine(t1 + "{");

            // static db related properties
            sb.AppendLine(t2 + "public static string Server { get; set; }");
            sb.AppendLine(t2 + "public static string Database { get; set; }");
            sb.AppendLine(t2 + "public static string UserId { get; set; }");
            sb.AppendLine(t2 + "public static string Password { get; set; }");

            // get connection string function declare
            sb.AppendLine(t2 + "public static string ConnectionString()");
            sb.AppendLine(t2 + "{");

            if (cnStr == null) sb.AppendLine(t3 + "string cnString = \"YOUR CN STRING HERE\";");
            else
            {
                sb.AppendLine(t3 + $"string cnString = @\"{cnStr}\";");
                sb.AppendLine();
                sb.AppendLine(t3 + "if (!string.IsNullOrWhiteSpace(Server) & !string.IsNullOrWhiteSpace(Database) &");
                sb.AppendLine(t3 + "    !string.IsNullOrWhiteSpace(UserId) & !string.IsNullOrWhiteSpace(Password))");
                sb.AppendLine(t3 + "    cnString = $\"Server={Server};Database={Database};User Id={UserId};Password={Password};\";");
            }

            sb.AppendLine();
            sb.AppendLine(t3 + "return cnString;");


            // close function
            sb.AppendLine(t2 + "}");


            // class end
            sb.AppendLine(t1 + "}");


            // namespace end
            if (!string.IsNullOrEmpty(NameSpace)) sb.AppendLine("}");


            return sb.ToString();

        }

    }
}
