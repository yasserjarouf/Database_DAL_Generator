using System;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Base_Generator_Logic
{
    public static class sTasks
    {
        const string t1 = "\t";
        const string t2 = "\t\t";
        const string t3 = "\t\t\t";
        const string t4 = "\t\t\t\t";
        const string t5 = "\t\t\t\t\t";
        const string t6 = "\t\t\t\t\t\t";

        #region TopParts

        public static string BuildClassFileText(this sTable table, sDb db, List<string> usings = null, string NameSpace = null)
        {
            StringBuilder sb = new StringBuilder();

            //build usings
            if (usings != null)
            {
                foreach (var use in usings)
                {
                    sb.AppendLine(string.Format("using {0};", use));
                }
            }
            sb.AppendLine();

            //build namespace
            if (NameSpace != null)
            {
                NameSpace = string.Format("namespace {0}", NameSpace);
                sb.AppendLine(NameSpace);
                sb.AppendLine("{");
            }

            //build class
            // causes issue and overwrites
            //sb.AppendLine(t1 + string.Format("public class {0}", table.GetStrippedNameBy('_')));
            sb.AppendLine(t1 + string.Format("public class {0}", table.GetCsRefName()));
            sb.AppendLine(t1 + "{");
            sb.AppendLine();

            //region start 
            sb.AppendLine(t2 + "#region AutoGenerated");
            sb.AppendLine();

            //01 properties
            sb.Append(table.getPropertiesDeclarationText());
            sb.AppendLine();

            //02 parse
            sb.Append(table.getParseDeclarationText());
            sb.AppendLine();

            //03 add
            sb.Append(table.getAddDeclarationText(db));
            sb.AppendLine();

            //04 get by key
            sb.Append(table.getGetByIdDeclarationText(db));
            sb.AppendLine();

            //05 update
            sb.Append(table.getUpdateDeclarationText(db));
            sb.AppendLine();

            //06 delete
            sb.Append(table.getDeleteByIdDeclarationText(db));
            sb.AppendLine();

            //07 get all
            sb.Append(table.getGetAllDeclarationText(db));
            sb.AppendLine();

            //08 get count
            sb.Append(table.getGetCountDeclarationText(db));
            sb.AppendLine();

            //09 get advanced search
            sb.Append(table.getAdvSearch(db));
            sb.AppendLine();

            //10 get advanced search records count
            sb.Append(table.getAdvSerachCountOnly(db));
            sb.AppendLine();

            //11 get build add command string
            sb.Append(table.getBuildAddCommand(db));
            sb.AppendLine();

            //12 get build update command string
            sb.Append(table.getBuildUpdateCommand(db));
            sb.AppendLine();

            //13 get build delete command string
            sb.Append(table.getBuildDeleteCommand(db));
            sb.AppendLine();

            //region end
            sb.AppendLine(t2 + "#endregion");
            sb.AppendLine();

            //close class
            sb.AppendLine(t1 + "}");

            //close namespace
            if (!string.IsNullOrEmpty(NameSpace))
                sb.AppendLine("}");
            return sb.ToString();
        }

        public static string BuildDbClassFileText(this sDb db, List<string> usings = null, string NameSpace = null)
        {
            StringBuilder sb = new StringBuilder();

            //build usings
            if (usings != null)
            {
                foreach (var use in usings)
                {
                    sb.AppendLine(string.Format("using {0};", use));
                }
            }
            sb.AppendLine();

            //build namespace
            if (NameSpace != null)
            {
                NameSpace = string.Format("namespace {0}", NameSpace);
                sb.AppendLine(NameSpace);
                sb.AppendLine("{");
            }

            //class declare
            sb.AppendLine(t1 + string.Format("public class _{0}", db.Name.Trim()));
            sb.AppendLine(t1 + "{");

            //get connection string function declare
            sb.AppendLine(t2 + "public static string ConnectionString()");
            sb.AppendLine(t2 + "{");

            sb.AppendLine(t3 + "string cnString = \"YOUR CN STRING HERE\";");
            sb.AppendLine(t3 + "return cnString;");

            //close function
            sb.AppendLine(t2 + "}");

            //close class
            sb.AppendLine(t1 + "}");

            //close namespace
            if (!string.IsNullOrEmpty(NameSpace))
                sb.AppendLine("}");
            return sb.ToString();
        }

        #endregion

        #region MajorParts

        //get all properties declaration text
        public static string getPropertiesDeclarationText(this sTable table)
        {
            StringBuilder st = new StringBuilder();

            foreach (sColumn column in table.Columns)
            {
                //normal property
                st.AppendLine(t2 + column.getCsNormalPropertyDeclarationText());

                //get also if there is a linked object
                if (column.checkIfColumnLinkedWithAnotherTable())
                    st.AppendLine(t2 + column.getCsPropertyDeclarationTextForLinkedTable()); ;
            }

            return st.ToString();
        }

        //get the parse function string
        public static string getParseDeclarationText(this sTable table)
        {
            StringBuilder sb = new StringBuilder();

            //declare
            sb.AppendLine(t2 + string.Format("public static {0} Parse{0}(DataRow row)", table.GetCsRefName()));
            //open
            sb.AppendLine(t2 + "{");

            //get nullable columns
            var nullbs = table.Columns.Where(c => c.IsNullable & !c.getCsDataType().Equals(sEnum.CsDataType._String) & !c.getCsDataType().Equals(sEnum.CsDataType._Byte));

            //process the median nullable types
            foreach (sColumn column in nullbs)
            {
                sb.AppendLine(string.Format(t3 + "{0} __{1} = null;", column.getCsAndIfNullTypeWithIgnoreString(), column.GetCsRefName()));
                sb.AppendLine(string.Format(t3 + "if (!row.IsNull(\"{0}\")) __{3} = {1}.Parse(row[\"{2}\"].ToString());", column.Name, column.SqlDatatype.GetCsTypeString(), column.Name, column.GetCsRefName()));
            }

            //new empty line if there are nullables
            if (nullbs.Count() > 0)
                sb.AppendLine();

            //return object creation
            sb.AppendLine(string.Format(t3 + "{0} _{0} = new {0}()", table.GetCsRefName()));
            sb.AppendLine(t3 + "{");

            //output properties values assignment
            foreach (sColumn column in table.Columns)
            {
                //string is special case
                if (column.getCsDataType().Equals(sEnum.CsDataType._String))
                {
                    sb.AppendLine(t4 + string.Format("{0} = row[\"{1}\"].ToString(),", column.GetCsRefName(), column.Name));
                }
                else if (column.getCsDataType().Equals(sEnum.CsDataType._Byte))
                {
                    sb.AppendLine(t4 + string.Format("{0} = (byte[])row[\"{1}\"],", column.GetCsRefName(), column.Name));
                }
                else if (column.getCsDataType().Equals(sEnum.CsDataType._TimeSpan))
                {
                    if (column.IsNullable)
                        sb.AppendLine(t4 + string.Format("{0} = __{0},", column.GetCsRefName()));

                    else
                        sb.AppendLine(t4 + string.Format("{0} = (TimeSpan)row[\"{1}\"],", column.GetCsRefName(), column.Name));

                }
                else
                {
                    if (column.IsNullable)
                        sb.AppendLine(t4 + string.Format("{0} = __{0},", column.GetCsRefName()));

                    else
                        sb.AppendLine(t4 + string.Format("{0} = {1}.Parse(row[\"{2}\"].ToString()),", column.GetCsRefName(), column.SqlDatatype.GetCsTypeString(), column.Name));
                }
            }

            //close the object declare and new line
            sb.AppendLine(t3 + "};");
            sb.AppendLine();

            //the return clause
            sb.AppendLine(t3 + string.Format("return _{0};", table.GetCsRefName()));

            //close
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get the delete by id function string
        public static string getDeleteByIdDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            string tblFuNa = table.Name;
            string tblShNa = table.Name;
            string ColNa = column.Name;
            string ColPTy = column.SqlDatatype.GetCsTypeString();

            sb.AppendLine(t2 + string.Format("public static Boolean Delete{0}By{2}({1} {0}{2})", tblShNa, ColPTy, ColNa));
            sb.AppendLine(t2 + "{");

            sb.AppendLine(t3 + string.Format("if (Get{0}By{1}({0}{1}) != null)", tblShNa, ColNa));
            sb.AppendLine(t3 + "{");

            //connection block with open
            sb.Append(db.getConnectionBlock(true, t4));
            sb.AppendLine(t4 + string.Format("cm.CommandText = \"DELETE FROM {0} WHERE {1} = {2}\";", table.FQN, column.FQN, column.getBasicParameterName()));
            sb.AppendLine(t4 + getAndSetCommandParameter(column, "cm", null, tblShNa + ColNa));
            sb.AppendLine(t4 + "int count = cm.ExecuteNonQuery();");
            sb.AppendLine(t4 + "cm.Connection.Close();");
            sb.AppendLine(t4 + "return (count == 1) ? true : false;");

            sb.AppendLine(t3 + "}");
            sb.AppendLine(t3 + "return false;");
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get the delete by id function string
        public static string getGetByIdDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            string tblShNa = table.Name;
            string ColNa = column.Name;
            string ColPTy = column.SqlDatatype.GetCsTypeString();

            sb.AppendLine(t2 + string.Format("public static {0} Get{0}By{2}({1} {0}{2})", tblShNa, ColPTy, ColNa));
            sb.AppendLine(t2 + "{");

            sb.AppendLine(t3 + string.Format("{0} _{0} = new {0}();", tblShNa));
            sb.AppendLine(t3 + "DataSet ds = new DataSet();");

            //connection block with open
            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine(t3 + string.Format("cm.CommandText = \"SELECT TOP 1 * FROM {0} WHERE {1} = {2}\";", table.FQN, column.FQN, column.getBasicParameterName()));
            sb.AppendLine(t3 + getAndSetCommandParameter(column, "cm", null, tblShNa + ColNa));
            sb.AppendLine(t3 + "SqlDataAdapter da = new SqlDataAdapter(cm);");
            sb.AppendLine(t3 + "da.Fill(ds);");
            sb.AppendLine(t3 + "cm.Connection.Close();");
            sb.AppendLine(t3 + "if (ds.Tables[0].Rows.Count == 0) return null;");
            sb.AppendLine(t3 + string.Format("_{0} = Parse{0}(ds.Tables[0].Rows[0]);", tblShNa));
            sb.AppendLine(t3 + string.Format("return _{0};", tblShNa));
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get all
        public static string getGetAllDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();
            string tblShNa = table.GetCsRefName();

            sb.AppendLine(t2 + string.Format("public static List<{0}> GetAll{0}()", tblShNa));
            sb.AppendLine(t2 + "{");

            sb.AppendLine(t3 + string.Format("List<{0}> list_{0} = new List<{0}>();", tblShNa));
            sb.AppendLine(t3 + "DataSet ds = new DataSet();");

            //connection block with open
            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine(t3 + string.Format("cm.CommandText = \"SELECT * FROM {0}\";", table.FQN));
            sb.AppendLine(t3 + "SqlDataAdapter da = new SqlDataAdapter(cm);");
            sb.AppendLine(t3 + "da.Fill(ds);");
            sb.AppendLine(t3 + "cm.Connection.Close();");


            sb.AppendLine(t3 + "foreach (DataRow row in ds.Tables[0].Rows)");
            sb.AppendLine(t3 + "{");
            sb.AppendLine(t4 + string.Format("list_{0}.Add({0}.Parse{0}(row));", tblShNa));
            sb.AppendLine(t3 + "}");
            sb.AppendLine(t3 + string.Format("return list_{0};", tblShNa));
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get table count
        public static string getGetCountDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            string tblShNa = table.Name;

            sb.AppendLine(t2 + string.Format("public static Int32 Get{0}Count()", tblShNa));
            sb.AppendLine(t2 + "{");

            //connection block with open
            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine(t3 + string.Format("cm.CommandText = \"SELECT COUNT(*) FROM {0}\";", table.FQN));
            sb.AppendLine(t3 + "Int32 count = (Int32)cm.ExecuteScalar();");
            sb.AppendLine(t3 + "cm.Connection.Close();");

            sb.AppendLine(t3 + "return count;");

            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get add method
        public static string getAddDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            //means no primary key
            if (column == null) return "";

            string tblShNa = table.Name;
            string PkColNa = column.Name;
            string PkColPTy = column.SqlDatatype.GetCsTypeString();
            string PkclTpNulbl = column.getCsAndIfNullTypeWithIgnoreString();

            sb.AppendLine(t2 + string.Format("public static {0} Add{1}({1} _{1})", PkclTpNulbl, tblShNa));
            sb.AppendLine(t2 + "{");

            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine();

            StringBuilder cmdText = new StringBuilder();
            StringBuilder parms = new StringBuilder();

            //start building the command text
            cmdText.AppendLine(t3 + string.Format("cm.CommandText = @\"INSERT INTO {0}", table.FQN));
            cmdText.AppendLine(t4 + "(");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t5 + col.FQN + sfx);
            }
            cmdText.AppendLine(t4 + ")");
            cmdText.AppendLine(t4 + "VALUES");
            cmdText.AppendLine(t4 + "(");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t5 + col.getBasicParameterName() + sfx);
            }
            cmdText.AppendLine(t4 + ");");

            if (table.HasIdentity())
                cmdText.AppendLine(t4 + "SELECT CONVERT(int, scope_identity())\";");
            else
                cmdText.AppendLine(t4 + "\";");
            //end building the command text

            foreach (sColumn col in table.Columns)
            {
                if (col.IsIdentity) continue;
                parms.AppendLine(t3 + col.getAndSetCommandParameter("cm", string.Format("_{0}", tblShNa), null));
            }

            sb.Append(cmdText.ToString());
            sb.AppendLine();
            sb.Append(parms.ToString());

            sb.AppendLine();
            sb.AppendLine(t3 + "var res = cm.ExecuteScalar();");
            if (column.IsNullable) sb.AppendLine(t3 + "if (res == null) return null;");
            sb.AppendLine(t3 + string.Format("return ({0})res;", PkColPTy));

            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get update method
        public static string getUpdateDeclarationText(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            string tblFuNa = table.Name;
            string tblShNa = table.Name;
            string ColNa = column.Name;
            string ColPTy = column.SqlDatatype.GetCsTypeString();

            sb.AppendLine(t2 + string.Format("public static Boolean Update{0}({0} _{0})", tblShNa));
            sb.AppendLine(t2 + "{");

            sb.AppendLine(t3 + string.Format("if (Get{0}By{1}(_{0}.{1}) != null)", tblShNa, ColNa));
            sb.AppendLine(t3 + "{");

            //connection block with open
            sb.Append(db.getConnectionBlock(true, t4));
            sb.AppendLine();

            StringBuilder cmdText = new StringBuilder();
            StringBuilder parms = new StringBuilder();

            //start building the command text
            cmdText.AppendLine(t4 + string.Format("cm.CommandText = @\"UPDATE {0}", table.FQN));
            cmdText.AppendLine(t5 + "SET");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t6 + string.Format("{0} = {1}{2}", col.FQN, col.getBasicParameterName(), sfx));
            }
            cmdText.AppendLine(t5 + string.Format("WHERE {0} = {1}\";", column.FQN, column.getBasicParameterName()));
            //end building the command text

            foreach (sColumn col in table.Columns)
            {
                parms.AppendLine(t4 + col.getAndSetCommandParameter("cm", string.Format("_{0}", tblShNa), null));
            }

            sb.Append(cmdText.ToString());
            sb.AppendLine();
            sb.Append(parms.ToString());

            sb.AppendLine();
            sb.AppendLine(t4 + "Int32 count = cm.ExecuteNonQuery();");
            sb.AppendLine(t4 + "return (count == 1) ? true : false;");
            sb.AppendLine(t3 + "}");
            sb.AppendLine(t3 + "return false;");
            sb.AppendLine(t2 + "}");

            return sb.ToString();
        }

        //get advanced search
        public static string getAdvSearch(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();
            sColumn column = table.Constraints
                            .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            sb.AppendLine(t2 + "public static DataTable AdvancedSearch(Int32 pageSize, Int32 requiredPage, String fullOrderClause = \"ORDER BY " + column.FQN + " ASC\", String fullWhereClause = \"\", String FullTextSearch = \"\", List<SqlParameter> parameters = null)");
            //open functions
            sb.AppendLine(t2 + "{");
            sb.AppendLine(t3 + "DataSet ds = new DataSet();");
            //connection
            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine();
            //load parameters
            sb.AppendLine(t3 + "if (parameters != null)");
            sb.AppendLine(t3 + "{");
            sb.AppendLine(t3 + "cm.Parameters.AddRange(parameters.ToArray());");
            sb.AppendLine(t3 + "}");
            sb.AppendLine();

            sb.AppendLine(t3 + "string searchWhere = @\"WHERE");
            sb.AppendLine(t3 + "(");

            //get connected tables
            List<sConstraint> connections = table.Constraints.Where(c => c.ConstraintType == sEnum.SqlConstraintType.ForeignKey).ToList();
            //full text search
            {
                //the normal table columns
                for (int i = 0; i < table.Columns.Count; i++)
                {
                    sColumn col = table.Columns[i];

                    string sfx = (i < table.Columns.Count - 1 | connections.Count > 0) ? "OR" : "";
                    sb.AppendLine(t4 + string.Format("{0} LIKE '%' + @searchText + '%' {1}", col.FQN, sfx));
                }
                //to know we reached the last 
                int cc00 = connections.Count;
                //get pk tables and each will get the column name and make an alias for it
                int jtc00 = 0; //this to make alias for the joined tables
                foreach (sConstraint constraint in connections)
                {
                    cc00--;
                    jtc00++;
                    sTable linkedTable = constraint.PK_Table;
                    if (linkedTable == null) continue;
                    for (int i = 0; i < linkedTable.Columns.Count; i++)
                    {
                        sColumn col = linkedTable.Columns[i];
                        string sfx = (i == linkedTable.Columns.Count - 1 & cc00 == 0) ? "" : "OR";
                        sb.AppendLine(t4 + string.Format("jt{0}.{1} LIKE '%' + @searchText + '%' {2}", jtc00, col.Name, sfx));
                    }
                }
            }
            sb.AppendLine(t3 + ")\";");

            sb.AppendLine();
            sb.AppendLine(t3 + "if (FullTextSearch != \"\")");
            sb.AppendLine(t3 + "{");
            sb.AppendLine(t4 + "SqlParameter fullSearchParam = new SqlParameter(\"@searchText\", FullTextSearch.ToString());");
            sb.AppendLine(t4 + "cm.Parameters.Add(fullSearchParam);");
            sb.AppendLine(t4 + "fullWhereClause = searchWhere;");
            sb.AppendLine(t3 + "}");
            sb.AppendLine();

            //start the big work
            sb.AppendLine(t3 + "cm.CommandText = String.Format(@\"SELECT");
            //get the normal select stuff, to be able to parse normally
            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];

                string sfx = (i < table.Columns.Count - 1 | connections.Count > 0) ? "," : "";
                sb.AppendLine(t4 + string.Format("{0}{1}", col.FQN, sfx));
            }

            //to know we reached the last 
            int count = connections.Count;
            //get pk tables and each will get the column name and make an alias for it
            int jtc = 0; //this to make alias for the joined tables
            foreach (sConstraint constraint in connections)
            {
                count--;
                jtc++;
                sTable linkedTable = constraint.PK_Table;
                if (linkedTable == null) continue;
                for (int i = 0; i < linkedTable.Columns.Count; i++)
                {
                    sColumn col = linkedTable.Columns[i];
                    string combcolname = db.Name + "_" + constraint.Name + "_" + col.Name;
                    string sfx = (i == linkedTable.Columns.Count - 1 & count == 0) ? "" : ",";
                    sb.AppendLine(t4 + string.Format("jt{0}.{1} AS '{2}'{3}", jtc, col.Name, combcolname, sfx));
                }
            }
            //the from table
            sb.AppendLine(t4 + String.Format("FROM {0}", table.FQN));
            //left joins
            jtc = 0; //this to make alias for the joined tables
            foreach (sConstraint constraint in connections)
            {
                jtc++;
                sTable linkedTable = constraint.PK_Table;
                if (linkedTable == null) continue;
                sb.AppendLine(t4 + string.Format("LEFT JOIN {0} AS jt{3} ON jt{3}.{1} = {2}", linkedTable.FQN, constraint.PK_Column.Name, constraint.Column.FQN, jtc));
            }
            //finalize the command
            sb.AppendLine(t4 + "{0} {1} OFFSET {2} ROWS FETCH NEXT {3} ROWS ONLY\", fullWhereClause, fullOrderClause, pageSize * (requiredPage - 1), pageSize); ");

            //finishing
            sb.AppendLine(t3 + "SqlDataAdapter da = new SqlDataAdapter(cm);");
            sb.AppendLine(t3 + "da.Fill(ds);");
            sb.AppendLine(t3 + "cm.Connection.Close();");

            //return
            sb.AppendLine(t3 + "return ds.Tables[0];");

            //close function
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get advanced serach records count
        public static string getAdvSerachCountOnly(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();
            sColumn column = table.Constraints
                            .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            if (column == null) return "";

            sb.AppendLine(t2 + "public static Int32 AdvancedSearchRecordsCount(String fullWhereClause = \"\", String FullTextSearch = \"\", List<SqlParameter> parameters = null)");
            //open functions
            sb.AppendLine(t2 + "{");
            //connection
            sb.Append(db.getConnectionBlock(true, t3));
            sb.AppendLine();
            //load parameters
            sb.AppendLine(t3 + "if (parameters != null)");
            sb.AppendLine(t3 + "{");
            sb.AppendLine(t3 + "cm.Parameters.AddRange(parameters.ToArray());");
            sb.AppendLine(t3 + "}");
            sb.AppendLine();

            sb.AppendLine(t3 + "string searchWhere = @\"WHERE");
            sb.AppendLine(t3 + "(");

            //get connected tables
            List<sConstraint> connections = table.Constraints.Where(c => c.ConstraintType == sEnum.SqlConstraintType.ForeignKey).ToList();
            //full text search
            {
                //the normal table columns
                for (int i = 0; i < table.Columns.Count; i++)
                {
                    sColumn col = table.Columns[i];

                    string sfx = (i < table.Columns.Count - 1 | connections.Count > 0) ? "OR" : "";
                    sb.AppendLine(t4 + string.Format("{0} LIKE '%' + @searchText + '%' {1}", col.FQN, sfx));
                }
                //to know we reached the last 
                int cc00 = connections.Count;
                //get pk tables and each will get the column name and make an alias for it
                int jtc00 = 0; //this to make alias for the joined tables
                foreach (sConstraint constraint in connections)
                {
                    cc00--;
                    jtc00++;
                    sTable linkedTable = constraint.PK_Table;
                    if (linkedTable == null) continue;
                    for (int i = 0; i < linkedTable.Columns.Count; i++)
                    {
                        sColumn col = linkedTable.Columns[i];
                        string sfx = (i == linkedTable.Columns.Count - 1 & cc00 == 0) ? "" : "OR";
                        sb.AppendLine(t4 + string.Format("jt{0}.{1} LIKE '%' + @searchText + '%' {2}", jtc00, col.Name, sfx));
                    }
                }
            }
            sb.AppendLine(t3 + ")\";");

            sb.AppendLine();
            sb.AppendLine(t3 + "if (FullTextSearch != \"\")");
            sb.AppendLine(t3 + "{");
            sb.AppendLine(t4 + "SqlParameter fullSearchParam = new SqlParameter(\"@searchText\", FullTextSearch.ToString());");
            sb.AppendLine(t4 + "cm.Parameters.Add(fullSearchParam);");
            sb.AppendLine(t4 + "fullWhereClause = searchWhere;");
            sb.AppendLine(t3 + "}");
            sb.AppendLine();

            //start the big work
            sb.AppendLine(t3 + "cm.CommandText = String.Format(@\"SELECT COUNT(*)");
            //the from table
            sb.AppendLine(t4 + String.Format("FROM {0}", table.FQN));
            //left joins
            int jtc = 0; //this to make alias for the joined tables
            foreach (sConstraint constraint in connections)
            {
                jtc++;
                sTable linkedTable = constraint.PK_Table;
                if (linkedTable == null) continue;
                sb.AppendLine(t4 + string.Format("LEFT JOIN {0} AS jt{3} ON jt{3}.{1} = {2}", linkedTable.FQN, constraint.PK_Column.Name, constraint.Column.FQN, jtc));
            }
            //finalize the command
            sb.AppendLine(t4 + "{0}\", fullWhereClause); ");

            //execute and return
            sb.AppendLine(t3 + "Int32 count = (Int32)cm.ExecuteScalar();");
            sb.AppendLine(t3 + "cm.Connection.Close();");

            sb.AppendLine(t3 + "return count;");

            //close function
            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        //get build add command
        public static string getBuildAddCommand(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            //means no primary key
            if (column == null) return "";

            string tblShNa = table.Name;

            sb.AppendLine(t2 + string.Format("public static SqlCommand BuildAdd{0}Command(SqlConnection cn, SqlTransaction trn, {0} _{0})", tblShNa));
            sb.AppendLine(t2 + "{");
            sb.AppendLine(t3 + "if (cn == null | trn == null) throw new NoNullAllowedException();");
            sb.AppendLine(t3 + "SqlCommand cm = new SqlCommand();");
            sb.AppendLine(t3 + "cm.Connection = cn;");
            sb.AppendLine(t3 + "cm.Transaction = trn;");
            sb.AppendLine();

            StringBuilder cmdText = new StringBuilder();
            StringBuilder parms = new StringBuilder();

            //start building the command text
            cmdText.AppendLine(t3 + string.Format("cm.CommandText = @\"INSERT INTO {0}", table.FQN));
            cmdText.AppendLine(t4 + "(");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t5 + col.FQN + sfx);
            }
            cmdText.AppendLine(t4 + ")");
            cmdText.AppendLine(t4 + "VALUES");
            cmdText.AppendLine(t4 + "(");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t5 + col.getBasicParameterName() + sfx);
            }
            cmdText.AppendLine(t4 + ");");

            if (table.HasIdentity())
                cmdText.AppendLine(t4 + "SELECT CONVERT(int, scope_identity())\";");
            else
                cmdText.AppendLine(t4 + "\";");
            //end building the command text

            foreach (sColumn col in table.Columns)
            {
                if (col.IsIdentity) continue;
                parms.AppendLine(t3 + col.getAndSetCommandParameter("cm", string.Format("_{0}", tblShNa), null));
            }

            sb.Append(cmdText.ToString());
            sb.AppendLine();
            sb.Append(parms.ToString());

            sb.AppendLine();
            sb.AppendLine(t3 + "return cm;");

            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        public static string getBuildUpdateCommand(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            //means no primary key
            if (column == null) return "";

            string tblShNa = table.Name;

            sb.AppendLine(t2 + string.Format("public static SqlCommand BuildUpdate{0}Command(SqlConnection cn, SqlTransaction trn, {0} _{0})", tblShNa));
            sb.AppendLine(t2 + "{");
            sb.AppendLine(t3 + "if (cn == null | trn == null) throw new NoNullAllowedException();");
            sb.AppendLine(t3 + "SqlCommand cm = new SqlCommand();");
            sb.AppendLine(t3 + "cm.Connection = cn;");
            sb.AppendLine(t3 + "cm.Transaction = trn;");
            sb.AppendLine();

            StringBuilder cmdText = new StringBuilder();
            StringBuilder parms = new StringBuilder();

            //start building the command text
            cmdText.AppendLine(t4 + string.Format("cm.CommandText = @\"UPDATE {0}", table.FQN));
            cmdText.AppendLine(t5 + "SET");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                sColumn col = table.Columns[i];
                if (col.IsIdentity) continue;

                string sfx = (i < table.Columns.Count - 1) ? "," : "";
                cmdText.AppendLine(t6 + string.Format("{0} = {1}{2}", col.FQN, col.getBasicParameterName(), sfx));
            }
            cmdText.AppendLine(t5 + string.Format("WHERE {0} = {1}\";", column.FQN, column.getBasicParameterName()));
            //end building the command text

            foreach (sColumn col in table.Columns)
            {
                parms.AppendLine(t4 + col.getAndSetCommandParameter("cm", string.Format("_{0}", tblShNa), null));
            }

            sb.Append(cmdText.ToString());
            sb.AppendLine();
            sb.Append(parms.ToString());

            sb.AppendLine();
            sb.AppendLine(t3 + "return cm;");

            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        public static string getBuildDeleteCommand(this sTable table, sDb db)
        {
            StringBuilder sb = new StringBuilder();

            sColumn column = table.Constraints
                .Where(c => c.ConstraintType.Equals(sEnum.SqlConstraintType.PrimaryKey)).FirstOrDefault()?.Column;
            //means no primary key
            if (column == null) return "";

            string tblShNa = table.Name;
            string ColNa = column.Name;
            string ColPTy = column.SqlDatatype.GetCsTypeString();

            sb.AppendLine(t2 + string.Format("public static SqlCommand BuildDeleteBy{0}IdCommand(SqlConnection cn, SqlTransaction trn, {1} {0}{2})", tblShNa, ColPTy, ColNa));
            sb.AppendLine(t2 + "{");
            sb.AppendLine(t3 + "if (cn == null | trn == null) throw new NoNullAllowedException();");
            sb.AppendLine(t3 + "SqlCommand cm = new SqlCommand();");
            sb.AppendLine(t3 + "cm.Connection = cn;");
            sb.AppendLine(t3 + "cm.Transaction = trn;");
            sb.AppendLine();

            sb.AppendLine(t3 + string.Format("cm.CommandText = \"DELETE FROM {0} WHERE {1} = {2}\";", table.FQN, column.FQN, column.getBasicParameterName()));
            sb.AppendLine(t3 + getAndSetCommandParameter(column, "cm", null, tblShNa + ColNa));

            sb.AppendLine();
            sb.AppendLine(t3 + "return cm;");

            sb.AppendLine(t2 + "}");
            return sb.ToString();
        }

        #endregion

        #region SupportiveMethods

        //get the proper cs type consedering nullablitiy but not the string one since string can't be nullable
        public static string getCsAndIfNullTypeWithIgnoreString(this sColumn column)
        {
            string type = column.SqlDatatype.GetCsTypeString();
            if (column.IsNullable) return type + "?";
            else return type;
        }

        //to directly get the csdatatype enum
        public static sEnum.CsDataType getCsDataType(this sColumn column)
        {
            return column.SqlDatatype.GetCsDataType();
        }

        //get the complete single declaration line of normal property, no constraint involved
        public static string getCsNormalPropertyDeclarationText(this sColumn column)
        {
            string type = getCsFinalTypeStringWithNullable(column);

            string name = column.GetCsRefName(); // to make sure won't be an issue in class property

            string output = string.Format("public {0} {1} {{ get; set; }}", type, name);
            return output;
        }

        //check if the column is a foreign key
        public static bool checkIfColumnLinkedWithAnotherTable(this sColumn column)
        {
            //true if the table has a foreign key and it is our column
            return (column.Table.Constraints.Where(c => c.ConstraintType
                                .Equals(sEnum.SqlConstraintType.ForeignKey) & c.Column.Name == column.Name)
                                .Count() == 1);
        }

        //get the declaration line to get the linked object
        public static string getCsPropertyDeclarationTextForLinkedTable(this sColumn column)
        {
            //finding a constraint is a must
            sConstraint constraint = column.Table.Constraints.Where(c => c.Column == column).First();


            if (constraint.Name.Contains("FK_dbo.Bookings_dbo"))
            {
                bool sss = true;
            }


            string objName = constraint.Name.Split('.').Last();
            string objType = constraint.PK_Table.GetStrippedNameBy(sProject.escapeChar);
            string paramName = column.Name;
            string paramType = column.SqlDatatype.GetCsTypeString();

            string r = string.Format("public {0} {1}() {{ return {0}.Get{0}ById(({3}){2}); }}", objType, objName, paramName, paramType);
            return r;
        }

        //get the final type string with checking nullability also, like "Int32?"
        static string getCsFinalTypeStringWithNullable(sColumn column)
        {
            string type = column.SqlDatatype.GetCsTypeString();
            sEnum.CsDataType csdt = column.SqlDatatype.GetCsDataType();

            if (column.IsNullable & !csdt.Equals(sEnum.CsDataType._String) & !csdt.Equals(sEnum.CsDataType._Byte) & !csdt.Equals(sEnum.CsDataType.None))
            {
                return type + "?";
            }
            else
            {
                return type;
            }
        }

        //automate the parameter line thing
        static string getAndSetCommandParameter(this sColumn column, string commandName, string parent = null, string propNa = null)
        {
            //propNa means if we want to set custom property name or else use the column name
            string prnt = (parent == null) ? "" : parent + ".";
            string colNa = (propNa == null) ? column.Name : propNa;

            string tp, eq;
            int len;

            //_Contact_m.FirstName == null ? (Object)DBNull.Value : _Contact_m.FirstName;
            switch (column.SqlDatatype)
            {
                case sEnum.SqlDataType._nvarchar:
                    tp = "SqlDbType.NVarChar";
                    eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    len = column.Options.Where(o => o.Item1 == sEnum.SqlOption.MaxChar).First().Item2;
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}, {3}).Value = {4};", commandName, column.getBasicParameterName(), tp, len, eq);

                case sEnum.SqlDataType._int:
                    tp = "SqlDbType.Int";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._uniqueidentifier:
                    tp = "SqlDbType.UniqueIdentifier";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._datetime:
                    tp = "SqlDbType.DateTime";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._bit:
                    tp = "SqlDbType.Bit";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._decimal:
                    tp = "SqlDbType.Decimal";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._char:
                    tp = "SqlDbType.Char";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

                case sEnum.SqlDataType._varbinary:
                    tp = "SqlDbType.Binary";
                    if (column.IsNullable)
                        eq = string.Format("{0}{1} == null ? (Object)DBNull.Value : {0}{1}", prnt, colNa);
                    else
                        eq = string.Format("{0}{1}", prnt, colNa);
                    return string.Format("{0}.Parameters.Add(\"{1}\", {2}).Value = {3};", commandName, column.getBasicParameterName(), tp, eq);

            }

            return "";
        }

        //little code to get the param name of the column like @p_Id
        static string getBasicParameterName(this sColumn column)
        {
            return "@p_" + column.Name;
        }

        #endregion
    }
}
